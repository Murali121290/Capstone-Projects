pipeline {
  agent any
  environment {
    ECR_URL = "${env.ECR_URL}"
    SONAR_HOST = 'http://localhost:9000'
    SONAR_LOGIN = credentials('sonar-token')
    AWS_REGION = 'ap-south-1' // or your region
  }
  stages {
    stage('Checkout') {
      steps {
        checkout scm
      }
    }
    stage('SonarQube analysis') {
      steps {
        dir('jenkins') {
          sh 'sonar-scanner -Dproject.settings=sonar-project.properties'
        }
      }
    }
    stage('Build & Push Docker') {
      steps {
        withCredentials([[$class: 'AmazonWebServicesCredentialsBinding', credentialsId: 'aws-creds']]) {
          script {
            def image = "${env.ECR_URL}:${BUILD_NUMBER}"
            sh '''aws ecr get-login-password --region $AWS_REGION | docker login --username AWS --password-stdin $(echo $ECR_URL | cut -d'/' -f1)'''
            sh "docker build -t ${image} ./app"
            sh "docker push ${image}"
            env.IMAGE = image
          }
        }
      }
    }
    stage('Deploy to Minikube') {
      steps {
        sh 'minikube kubectl -- apply -f k8s/deployment.yaml'
        sh 'minikube kubectl -- apply -f k8s/service.yaml'
        sh "minikube image load ${env.IMAGE} || true"
        sh 'minikube kubectl -- set image deployment/vulnerable-app vulnerable-app=${env.IMAGE} || true'
      }
    }
  }
  post {
    failure {
      echo 'Pipeline failed — check credentials or quality gate.'
    }
    success {
      echo 'Pipeline succeeded — app deployed!'
    }
  }
}
